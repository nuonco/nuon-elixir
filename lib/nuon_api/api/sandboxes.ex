# NOTE: This file is auto generated by OpenAPI Generator 7.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule NuonAPI.Api.Sandboxes do
  @moduledoc """
  API calls for all endpoints tagged `Sandboxes`.
  """

  alias NuonAPI.Connection
  import NuonAPI.RequestBuilder

  @doc """
  get a sandbox

  ### Parameters

  - `connection` (NuonAPI.Connection): Connection to server
  - `sandbox_id` (String.t): sandbox ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, NuonAPI.Model.AppSandbox.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_sandbox(Tesla.Env.client, String.t, keyword()) :: {:ok, NuonAPI.Model.StderrErrResponse.t} | {:ok, NuonAPI.Model.AppSandbox.t} | {:error, Tesla.Env.t}
  def get_sandbox(connection, sandbox_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v1/sandboxes/#{sandbox_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, NuonAPI.Model.AppSandbox},
      {400, NuonAPI.Model.StderrErrResponse},
      {401, NuonAPI.Model.StderrErrResponse},
      {403, NuonAPI.Model.StderrErrResponse},
      {404, NuonAPI.Model.StderrErrResponse},
      {500, NuonAPI.Model.StderrErrResponse}
    ])
  end

  @doc """
  get sandbox releases

  ### Parameters

  - `connection` (NuonAPI.Connection): Connection to server
  - `sandbox_id` (String.t): sandbox ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%AppSandboxRelease{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_sandbox_releases(Tesla.Env.client, String.t, keyword()) :: {:ok, NuonAPI.Model.StderrErrResponse.t} | {:ok, list(NuonAPI.Model.AppSandboxRelease.t)} | {:error, Tesla.Env.t}
  def get_sandbox_releases(connection, sandbox_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v1/sandboxes/#{sandbox_id}/releases")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, NuonAPI.Model.AppSandboxRelease},
      {400, NuonAPI.Model.StderrErrResponse},
      {401, NuonAPI.Model.StderrErrResponse},
      {403, NuonAPI.Model.StderrErrResponse},
      {404, NuonAPI.Model.StderrErrResponse},
      {500, NuonAPI.Model.StderrErrResponse}
    ])
  end

  @doc """
  get all sandboxes

  ### Parameters

  - `connection` (NuonAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%AppSandbox{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_sandboxes(Tesla.Env.client, keyword()) :: {:ok, list(NuonAPI.Model.AppSandbox.t)} | {:error, Tesla.Env.t}
  def get_sandboxes(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v1/sandboxes")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, NuonAPI.Model.AppSandbox}
    ])
  end
end
